---
alwaysApply: true
---

# RestaurantOps Legacy System Architecture

This is a legacy ASP.NET Core MVC application for restaurant operations management. The system follows a traditional layered architecture with ADO.NET data access.

## Key Entry Points
- [Program.cs](mdc:RestaurantOps.Legacy/Program.cs) - Application startup and configuration
- [HomeController.cs](mdc:RestaurantOps.Legacy/Controllers/HomeController.cs) - Main entry point for web requests

## Architecture Layers

### Controllers (MVC Layer)
Located in [Controllers/](mdc:RestaurantOps.Legacy/Controllers/) directory:
- Handle HTTP requests and responses
- Coordinate between views and data layer
- Follow standard MVC pattern

### Data Access Layer
Located in [Data/](mdc:RestaurantOps.Legacy/Data/) directory:
- [SqlHelper.cs](mdc:RestaurantOps.Legacy/Data/SqlHelper.cs) - Legacy ADO.NET helper for database operations
- Repository classes for each domain entity (Employee, Menu, Order, etc.)
- Uses synchronous ADO.NET patterns

### Models (Domain Layer)
Located in [Models/](mdc:RestaurantOps.Legacy/Models/) directory:
- Domain entities representing business objects
- Simple POCO classes with minimal logic

### Views (Presentation Layer)
Located in [Views/](mdc:RestaurantOps.Legacy/Views/) directory:
- Razor views for UI presentation
- Follow MVC view conventions

## Database Schema
- [Database/init.sql](mdc:Database/init.sql) - Complete database schema and seed data
- SQL Server database with tables for: Categories, MenuItems, Orders, Inventory, Employees, etc.

## Testing
- [RestaurantOps.Tests/](mdc:RestaurantOps.Tests/) - Unit and integration tests
- Follows standard .NET testing patterns

## Legacy Characteristics
- Uses ADO.NET instead of Entity Framework
- Synchronous data access patterns
- Traditional MVC without modern patterns like dependency injection for repositories
- Direct SQL queries in repository classes# RestaurantOps Legacy System Architecture

This is a legacy ASP.NET Core MVC application for restaurant operations management. The system follows a traditional layered architecture with ADO.NET data access.

## Key Entry Points
- [Program.cs](mdc:RestaurantOps.Legacy/Program.cs) - Application startup and configuration
- [HomeController.cs](mdc:RestaurantOps.Legacy/Controllers/HomeController.cs) - Main entry point for web requests

## Architecture Layers

### Controllers (MVC Layer)
Located in [Controllers/](mdc:RestaurantOps.Legacy/Controllers/) directory:
- Handle HTTP requests and responses
- Coordinate between views and data layer
- Follow standard MVC pattern

### Data Access Layer
Located in [Data/](mdc:RestaurantOps.Legacy/Data/) directory:
- [SqlHelper.cs](mdc:RestaurantOps.Legacy/Data/SqlHelper.cs) - Legacy ADO.NET helper for database operations
- Repository classes for each domain entity (Employee, Menu, Order, etc.)
- Uses synchronous ADO.NET patterns

### Models (Domain Layer)
Located in [Models/](mdc:RestaurantOps.Legacy/Models/) directory:
- Domain entities representing business objects
- Simple POCO classes with minimal logic

### Views (Presentation Layer)
Located in [Views/](mdc:RestaurantOps.Legacy/Views/) directory:
- Razor views for UI presentation
- Follow MVC view conventions

## Database Schema
- [Database/init.sql](mdc:Database/init.sql) - Complete database schema and seed data
- SQL Server database with tables for: Categories, MenuItems, Orders, Inventory, Employees, etc.

## Testing
- [RestaurantOps.Tests/](mdc:RestaurantOps.Tests/) - Unit and integration tests
- Follows standard .NET testing patterns

## Legacy Characteristics
- Uses ADO.NET instead of Entity Framework
- Synchronous data access patterns
- Traditional MVC without modern patterns like dependency injection for repositories
- Direct SQL queries in repository classes
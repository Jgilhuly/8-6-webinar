---
alwaysApply: true
---

# RestaurantOps System Architecture

This is a modernized ASP.NET Core MVC application for restaurant operations management. The system follows a layered architecture with Entity Framework Core data access.

## Key Entry Points
- [Program.cs](mdc:RestaurantOps.Legacy/Program.cs) - Application startup and configuration
- [HomeController.cs](mdc:RestaurantOps.Legacy/Controllers/HomeController.cs) - Main entry point for web requests

## Architecture Layers

### Controllers (MVC Layer)
Located in [Controllers/](mdc:RestaurantOps.Legacy/Controllers/) directory:
- Handle HTTP requests and responses
- Coordinate between views and data layer
- Follow standard MVC pattern

### Data Access Layer (MODERNIZED ✅)
Located in [Data/](mdc:RestaurantOps.Legacy/Data/) directory:
- [RestaurantOpsContext.cs](mdc:RestaurantOps.Legacy/Data/RestaurantOpsContext.cs) - Entity Framework Core DbContext
- Repository classes for each domain entity using EF Core (Employee, Menu, Order, etc.)
- Interface-based repositories with dependency injection
- Uses Entity Framework Core with LINQ queries

### Models (Domain Layer) (ENHANCED ✅)
Located in [Models/](mdc:RestaurantOps.Legacy/Models/) directory:
- Domain entities representing business objects
- Enhanced with Entity Framework Core navigation properties
- Data validation attributes for model validation
- Proper relationships and constraints

### Views (Presentation Layer)
Located in [Views/](mdc:RestaurantOps.Legacy/Views/) directory:
- Razor views for UI presentation
- Follow MVC view conventions

## Database Schema
- [Database/init.sql](mdc:Database/init.sql) - Complete database schema and seed data
- SQL Server database with tables for: Categories, MenuItems, Orders, Inventory, Employees, etc.

## Testing
- [RestaurantOps.Tests/](mdc:RestaurantOps.Tests/) - Unit and integration tests
- Follows standard .NET testing patterns

## Modernization Status
- ✅ COMPLETED: Migrated from ADO.NET to Entity Framework Core
- ✅ COMPLETED: Added dependency injection for repositories  
- ✅ COMPLETED: Enhanced models with navigation properties and validation
- ✅ COMPLETED: Type-safe LINQ queries replace direct SQL
- TODO: Add async/await patterns throughout
- TODO: Add comprehensive logging and error handling